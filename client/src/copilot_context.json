{
	"title": "Web BCN - Frontend Developer Copilot Context",
	"lastUpdated": "21:00 02/07/2025",
	"creator": "Mai Thế Hào",
	"dataModels": {
		"description": "Các schema dữ liệu chính của ứng dụng, bao gồm người dùng và dự án",
		"notes": "Các schema này được sử dụng để định nghĩa cấu trúc dữ liệu trong MongoDB và các API endpoints",
		"users": {
			"description": "Schema thông tin người dùng/thành viên",
			"schema": {
				"_id": "String - MongoDB ObjectId",
				"user_id": "Number - ID người dùng",
				"username": "String - Username đăng nhập",
				"email": "String - Email liên hệ",
				"password": "String - Mật khẩu đã được mã hóa",
				"profile": {
					"avt": "String - Đường dẫn đến avatar",
					"name": "String - Tên hiển thị",
					"job": "String - Chức danh công việc",
					"status": "String - Trạng thái (Sinh viên năm...)",
					"bio": "String - Giới thiệu ngắn"
				},
				"role": "String - Vai trò (MEMBER, LEADER, ADMIN)",
				"statistics": {
					"star": "Number - Số sao đánh giá",
					"view": "Number - Số lượt xem",
					"project_count": "Number - Số dự án tham gia"
				},
				"technologies": "Array<String> - Danh sách công nghệ thành thạo",
				"projects": "Array<String> - Danh sách ID dự án đã tham gia",
				"created_at": "String - Ngày tạo (ISO format)",
				"updated_at": "String - Ngày cập nhật (ISO format)"
			},
			"notes": "Các ID projects là references đến collection projects"
		},
		"projects": {
			"description": "Schema thông tin dự án",
			"schema": {
				"_id": "String - MongoDB ObjectId",
				"name": "String - Tên dự án",
				"slug": "String - Slug URL (dùng cho routing)",
				"description": "String - Mô tả chi tiết",
				"thumbnail": "String - Đường dẫn đến ảnh thumbnail",
				"dates": {
					"start": "String - Thời gian bắt đầu (MM/YYYY)",
					"finish": "String - Thời gian kết thúc (MM/YYYY)"
				},
				"statistics": {
					"stars": "Number - Số sao đánh giá",
					"views": "Number - Số lượt xem"
				},
				"technologies": "Array<String> - Danh sách công nghệ sử dụng",
				"repository": {
					"github": "String - Link GitHub repo",
					"demo": "String - Link demo"
				},
				"team_members": "Array<String> - Danh sách ID thành viên tham gia",
				"status": "String - Trạng thái dự án (hoàn thành, đang thực hiện)",
				"created_at": "String - Ngày tạo (ISO format)",
				"updated_at": "String - Ngày cập nhật (ISO format)"
			},
			"notes": "Các ID team_members là references đến collection users"
		}
	},
	"apiIntegration": {
		"description": "Tích hợp API services để làm việc với dữ liệu người dùng và dự án",
		"importMethod": {
			"description": "Tất cả API functions được export từ services/api/index.js để dễ dàng import",
			"syntax": "import { functionName } from 'services/api';",
			"example": "import { getAllUsers, getProjectById } from 'services/api';"
		},
		"availableServices": {
			"userServices": {
				"getAllUsers": {
					"description": "Lấy tất cả người dùng",
					"params": "Không có",
					"returns": "Promise<Array> - Danh sách tất cả người dùng",
					"example": "const users = await getAllUsers();"
				},
				"getUserById": {
					"description": "Lấy thông tin người dùng theo ID",
					"params": "id: string - ID của người dùng",
					"returns": "Promise<Object|null> - Đối tượng người dùng hoặc null",
					"example": "const user = await getUserById('user123');"
				},
				"getUserByEmail": {
					"description": "Lấy thông tin người dùng theo email",
					"params": "email: string - Email của người dùng",
					"returns": "Promise<Object|null> - Đối tượng người dùng hoặc null",
					"example": "const user = await getUserByEmail('user@example.com');"
				},
				"getUsersWithPagination": {
					"description": "Lấy danh sách người dùng với phân trang",
					"params": "page: number, limit: number",
					"returns": "Promise<{users: Array, pagination: Object}>",
					"example": "const { users, pagination } = await getUsersWithPagination(1, 10);"
				}
			},
			"projectServices": {
				"getAllProjects": {
					"description": "Lấy tất cả dự án",
					"params": "Không có",
					"returns": "Promise<Array> - Danh sách tất cả dự án",
					"example": "const projects = await getAllProjects();"
				},
				"getProjectById": {
					"description": "Lấy thông tin dự án theo ID",
					"params": "id: string - ID của dự án",
					"returns": "Promise<Object|null> - Đối tượng dự án hoặc null",
					"example": "const project = await getProjectById('project123');"
				},
				"getProjectsByUserId": {
					"description": "Lấy danh sách dự án theo thành viên",
					"params": "userId: string - ID của người dùng",
					"returns": "Promise<Array> - Danh sách dự án có userId trong team_members",
					"example": "const userProjects = await getProjectsByUserId('user123');"
				},
				"getProjectsWithPagination": {
					"description": "Lấy danh sách dự án với phân trang",
					"params": "page: number, limit: number",
					"returns": "Promise<{projects: Array, pagination: Object}>",
					"example": "const { projects, pagination } = await getProjectsWithPagination(1, 10);"
				}
			}
		},
		"errorHandling": {
			"recommendation": "Luôn sử dụng try/catch khi gọi API functions",
			"example": "try {\n  const users = await getAllUsers();\n  // xử lý dữ liệu\n} catch (error) {\n  console.error('Lỗi khi lấy dữ liệu:', error);\n}"
		},
		"notes": "Hiện tại sử dụng mock data từ JSON files. Developer chỉ cần import và sử dụng các functions mà không cần quan tâm đến implementation bên trong."
	},
	"dataTransformation": {
		"description": "Chuyển đổi dữ liệu từ API thành props cho components",
		"transformers": {
			"transformUserToMemberCard": {
				"input": "User object từ API",
				"output": "Props cho MemberCard component",
				"mapping": {
					"id": "user._id",
					"avatar": "user.profile.avt",
					"role": "user.role",
					"name": "user.profile.name",
					"jobTitle": "user.profile.job",
					"status": "user.profile.status",
					"starCount": "user.statistics.star",
					"viewCount": "user.statistics.view",
					"projectCount": "user.statistics.project_count",
					"technologies": "user.technologies được map thành array của {id, name}"
				}
			},
			"transformProjectToProjectCard": {
				"input": "Project object từ API",
				"output": "Props cho ProjectCard component",
				"mapping": {
					"id": "project._id",
					"thumbnail": "project.thumbnail",
					"projectName": "project.name",
					"projectDes": "project.description",
					"numberStar": "project.statistics.stars",
					"numberView": "project.statistics.views",
					"startDate": "project.dates.start",
					"finishDate": "project.dates.finish",
					"technologies": "project.technologies"
				}
			}
		},
		"usage": {
			"howToUse": "Import từ services/transform và áp dụng cho objects",
			"example": "const transformedMembers = usersData.map(transformUserToMemberCard);"
		},
		"notes": "Các hàm transform trả về null nếu dữ liệu đầu vào không hợp lệ"
	},
	"technologiesMapped": {
		"description": "Mapping của tên công nghệ đến icon tương ứng",
		"notes": "Được định nghĩa trong src/consts/technologiesMapped.js",
		"usage": "import { technologiesMapped } from '../../consts/technologiesMapped';",
		"example": "{technologiesMapped[tech] ? <img src={technologiesMapped[tech]} alt={tech} /> : <span>{tech}</span>}"
	},
	"developers": [
		{
			"name": "Mai Thế Hào",
			"nickname": "Neo Adrian",
			"role": "Fullstack Developer, Administrator"
		},
		{
			"name": "Nguyễn Mai Minh Quý",
			"nickname": "wrxdie",
			"role": "Frontend Developer"
		},
		{
			"name": "Nguyễn Minh Vũ",
			"nickname": "takiin",
			"role": "Frontend Developer"
		},
		{
			"name": "Nguyễn Hoàng",
			"nickname": "hoangriji",
			"role": "Frontend Developer"
		}
	],
	"latestCheckReport": {
		"description": "Thông tin báo cáo về các vấn đề của lần kiểm tra gần nhất",
		"checkedAt": "21:00 02/07/2025",
		"issues": [
			{
				"description": "Trang HOME phần FOOTER đang bị tôi comment lại vì lỗi hiển thị, cần chỉnh sửa lại để hiển thị đúng.",
				"recommendedDev": "wrxdie",
				"solution": "Sửa lại style css cho hợp lí là ok."
			},
			{
				"description": "Phần style của trang Admin hiện tại bị rời rạc, nhiều class CSS đặt tên chưa nhất quán, chưa tận dụng tốt tính kế thừa (inheritance) của CSS. Một số block như 'Danh sách sinh viên' phải thêm display: flex và overflow-y: auto mới hiển thị đúng, trong khi các block khác lại dùng layout khác nhau, gây khó bảo trì.",
				"recommendedDev": "hoangriji",
				"solution": "Nên chuẩn hóa lại kiến trúc CSS cho trang Admin: Đặt tên class theo BEM hoặc convention rõ ràng, gom các thuộc tính chung vào class cha để kế thừa, sử dụng biến màu sắc và font chung, đảm bảo các block layout thống nhất (ví dụ: tất cả các card đều dùng flex hoặc grid, padding/margin đồng nhất). Đặc biệt, nên kiểm tra lại các block như 'Danh sách sinh viên', 'Bài viết', 'Sự kiện' để dùng chung một base style cho card hoặc section."
			},
			{
				"description": "Phần style của ITEM TABLE, phần show các item bị lỗi style phần khoảng cách giữa các item, truy cập vào path /members để xem rõ hơn.",
				"recommendedDev": "takiin",
				"solution": "Cần kiểm tra lại các thuộc tính margin/padding/gap và công thức tính toán phân chia của các item trong ITEM TABLE để đảm bảo khoảng cách giữa các item là đồng nhất cả 2 chiều ngang và dọc."
			}
		],
		"changesMade": [
			"Thay đổi path tới public trong các file comp, đồng thời cập nhật các đường dẫn trong public và comp lại theo phân loại pages-img",
			"Xóa bớt các phần thông tin trong file copilot_context.json để clean hơn và các thông tin không cần thiết",
			"Thêm các thông tin về các developer vào copilot_context.json để cho copilot dễ dàng hiểu được ai là người đang làm việc trên dự án này"
		],
		"notes": ""
	},
	"specialRequiredFieldForCopilot": [
		"Luôn hỏi danh tính dựa vào mục developers, dưới dạng list cho người dùng chọn",
		"Chỉ trả lời các câu hỏi liên quan đến phát triển phần mềm, code, hoặc dự án Web BCN.",
		"Trả lời ngắn gọn, súc tích, tập trung vào giải pháp kỹ thuật."
	]
}
